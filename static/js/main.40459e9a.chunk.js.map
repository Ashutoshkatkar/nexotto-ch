{"version":3,"sources":["sagas/index.js","reducer/index.js","App1.js","action/index.js","Routeing.js","index.js"],"names":["login","checklogin","actionWatcher","rootSaga","action","fetch","method","headers","body","JSON","stringify","data","then","response","json","put","type","takeLatest","all","INITIAL_STATE","reducer","state","mdata","loginDetails","loading","loginDetailsrecieved","App1","LoginDetails","LoginDetailsrecieved","useState","email","setEmail","password","setPassword","modal","setModal","toggle","useNavigate","useEffect","user","console","log","companyName","alert","loginResult","window","location","href","isOpen","firstName","lastName","className","required","value","readOnly","placeholder","onChange","e","target","color","onClick","lg","sm","xs","Form","noValidate","onSubmit","preventDefault","role","Group","mapDispatchToProps","connect","Routing","path","element","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40459e9a.chunk.js","sourcesContent":["import { put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\n\r\n\r\nfunction* login(action) {\r\n    const json = yield fetch('https://run.mocky.io/v3/386baee0-3694-4384-b69a-8e9798aac3a2', {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(action.data),\r\n\r\n    }).then((response) => response.json());\r\n\r\n    yield put({ type: \"LOGIN_DETAILS_RECEIVED\", json: json });\r\n}\r\n\r\nfunction* checklogin(action) {\r\n    const json = yield fetch(' https://run.mocky.io/v3/e9fbbabc-ef69-4bf1-9628-f3c9fe991119', {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(action.data),\r\n\r\n    }).then((response) => response.json());\r\n\r\n    yield put({ type: \"logindeatils\", json: json });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* actionWatcher() {\r\n    yield takeLatest(\"login\", login);\r\n    yield takeLatest(\"checklogin\", checklogin);\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([actionWatcher()]);\r\n}","let INITIAL_STATE = {};\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case \"SENDDATA\":\r\n            return { state, mdata: action.data }\r\n        case \"LOGIN_DETAILS_RECEIVED\":\r\n            return { ...state, loginDetails: action.json, loading: false };\r\n\r\n        case \"logindeatils\":\r\n            return { ...state, loginDetailsrecieved: action.json, loading: false };\r\n\r\n        default:\r\n            if (state != INITIAL_STATE) {\r\n                return { state, loading: true };\r\n            }\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default reducer;","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Button,\r\n    CardImg,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Modal,\r\n    ModalFooter,\r\n    ModalHeader, ModalBody\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { login, checklogin } from './action/index'\r\nimport { useNavigate, Redirect } from \"react-router-dom\";\r\nexport default function App1({ login, LoginDetails, checklogin, LoginDetailsrecieved }) {\r\n\r\n    const [email, setEmail] = useState()\r\n    const [password, setPassword] = useState()\r\n\r\n    const [isSubmit, setIsSubmit] = useState();\r\n    const [modal, setModal] = useState(false);\r\n    let navigate = useNavigate();\r\n    // Toggle for Modal\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const handleSubmit = (e) => {\r\n        console.log('clickk')\r\n        e.preventDefault();\r\n\r\n        login({\r\n            email: email,\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (LoginDetails) {\r\n            if (LoginDetails.user.email == email) {\r\n                console.log('json data', LoginDetails.companyName)\r\n                alert('user authentication success')\r\n                setModal(!modal)\r\n                setPassword(\"\")\r\n            } else {\r\n                alert(\"wrong !!\")\r\n            }\r\n        }\r\n    }, [LoginDetails])\r\n\r\n\r\n    const Login = (e) => {\r\n\r\n        checklogin({\r\n            email: email,\r\n            password: password\r\n        })\r\n        setModal(!modal)\r\n    }\r\n    useEffect(() => {\r\n        if (LoginDetailsrecieved) {\r\n            if (LoginDetailsrecieved.loginResult == 'SUCCESS') {\r\n                alert('success')\r\n\r\n                window.location.href = \"https://nexotto.com\";\r\n                // setModal(!modal)\r\n                // setPassword(\"\")\r\n            } else {\r\n                alert(\"wrong !!\")\r\n            }\r\n        }\r\n    }, [LoginDetailsrecieved])\r\n\r\n    return (\r\n        <div>\r\n            {/* <h1>Iam app</h1> */}\r\n            {modal ? (\r\n                <>\r\n                    {/* <Button color=\"danger\"\r\n                        onClick={toggle}>Click me to open Modal</Button> */}\r\n                    <Modal isOpen={modal} toggle={toggle}>\r\n                        <ModalHeader\r\n                            toggle={toggle}>User Deatils</ModalHeader>\r\n                        <ModalBody>\r\n                            Email: {LoginDetails.user.email}<br></br>\r\n                            firstname:{LoginDetails.user.firstName}<br></br>\r\n                            lastname:{LoginDetails.user.lastName}\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Input\r\n                                className=\"form-control-alternative\"\r\n                                required\r\n                                value={email}\r\n                                readOnly\r\n                                placeholder=\"Email\"\r\n                                type=\"email\"\r\n                            />\r\n                            <Input\r\n                                className=\"form-control-alternative\"\r\n                                required\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                placeholder=\"password\"\r\n                                type=\"password\"\r\n                            />\r\n                            <Button color=\"primary\" onClick={toggle}>Okay</Button>\r\n                            <Button color=\"primary\" onClick={Login}>Login</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                </>\r\n            ) : (\"\")}\r\n            <Container className=\"py-lg-md d-flex\">\r\n                <div className=\"col \">\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Col lg=\"6\" sm='12' xs='12'>\r\n                            <Card className=\"bg-secondary shadow border-0 mt-5 floating\">\r\n                                <CardHeader className=\"bg-white\">\r\n                                    <div className=\"text-muted text-center\">\r\n                                        <h2>Sign in with</h2>\r\n                                    </div>\r\n                                </CardHeader>\r\n                                <CardBody className=\"px-lg-5 py-lg-5\">\r\n                                    <Form\r\n                                        noValidate\r\n                                        // validated={isSubmit}\r\n                                        onSubmit={handleSubmit}\r\n                                        role=\"form\"\r\n                                    >\r\n                                        <Form.Group className=\"mb-3\">\r\n                                            <i className=\"ni ni-email-83\" />\r\n                                            <Input\r\n                                                className=\"form-control-alternative\"\r\n                                                required\r\n                                                value={email}\r\n                                                onChange={(e) => setEmail(e.target.value)}\r\n                                                placeholder=\"Email\"\r\n                                                type=\"email\"\r\n                                            />\r\n\r\n                                        </Form.Group>\r\n                                        <div className=\"text-center\">\r\n                                            <Button className=\"my-4\" color=\"danger\" type=\"submit\">\r\n                                                Sign in\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Form>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    // checkLoginDetails: checkLoginDetails,\r\n    login: login,\r\n    checklogin: checklogin\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    LoginDetails: state.loginDetails,\r\n    LoginDetailsrecieved: state.loginDetailsrecieved\r\n});\r\n\r\nApp1 = connect(mapStateToProps, mapDispatchToProps)(App1);\r\n","export const senddata = (data) => ({\r\n    type: \"SENDDATA\",\r\n    data: data\r\n});\r\n\r\n\r\nexport const login = (data) => ({\r\n    type: \"login\",\r\n    data: data\r\n});\r\n\r\nexport const checklogin = (data) => ({\r\n    type: \"checklogin\",\r\n    data: data\r\n});","import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Routes,\r\n    Route,\r\n    Link,\r\n    Outlet\r\n} from 'react-router-dom';\r\nimport App1 from './App1';\r\n\r\nconst Routing = () => {\r\n    return (\r\n        <>\r\n            <Routes>\r\n                <Route path=\"/\" element={<App1 />} />\r\n\r\n            </Routes>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Routing\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { logger } from \"redux-logger\";\r\nimport rootSaga from \"./sagas\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./reducer\";\r\nimport App1 from './App1';\r\nimport Routing from './Routeing';\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware, logger));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n//const store = createStore(reducer)\r\n//console.log(\"DATA IS\", store.getState());\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            {/* <App /> */}\r\n            {/* <App1 /> */}\r\n            <Routing />\r\n        </Router>\r\n    </Provider>\r\n\r\n    , document.getElementById(\"root\"));"],"sourceRoot":""}